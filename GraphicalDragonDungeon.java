import javax.swing.JFrame;
import javax.swing.JOptionPane;
import java.awt.BorderLayout;
import java.awt.GridLayout;
import java.awt.Container;
import javax.swing.JLabel;
import javax.swing.JButton;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import java.awt.Component;
import javax.swing.ImageIcon;
import java.awt.event.KeyEvent;
import java.awt.AWTEvent;
import javax.swing.JMenuBar;
import javax.swing.JMenu;

/**
 * Graphical interface for Dragon Dungeon game
 * 
 * @author Michael Damian Mulligan 
 * @version March 30, 2011
 */
public class GraphicalDragonDungeon implements ActionListener
{
    private JFrame gameFrame;
    private JLabel status;
    private Container gameGrid;
    private DragonDungeon game;
    private ImageIcon playerIco;
    private ImageIcon monsterIco;
    private ImageIcon wallIco;
    private ImageIcon switchIco;
    private ImageIcon doorIco;
    private ImageIcon blankIco;
    private ImageIcon switchCloseIco;
    private ImageIcon fireIco;
    private boolean gameOver;
    private JFrame inputMethod;
    private int Difficulty;
    private String input;

    /**
     * Constructor for objects of class GraphicalDragonDungeon
     * Makes frame to ask for input method
     * Constructs frame for game rendering
     * Assigns sprites for use in game
     * Handles Difficulty and control schemes
     * @param game The game being rendered
     */
    public GraphicalDragonDungeon(DragonDungeon game)
    {
        inputMethod = new JFrame("Dragon Dungeon");
        Difficulty = 1;
        Dragon player = (Dragon) game.getPlayer();
        inputMethod.setLayout(new GridLayout(3, 1));
        status = new JLabel("Ammo: " + player.getAmmo());
        inputMethod.getContentPane().add(new JLabel("Select input method"));
        JLabel tempLab = (JLabel) inputMethod.getContentPane().getComponent(0);
        tempLab.setHorizontalAlignment(JLabel.CENTER);
        inputMethod.getContentPane().add(new GameButton("Keyboard", "IN_KEY"));
        inputMethod.getContentPane().add(new GameButton("Mouse", "IN_MOUSE"));
        GameButton tempBut = (GameButton) inputMethod.getContentPane().getComponent(1);
        tempBut.addActionListener(this);
        tempBut = (GameButton) inputMethod.getContentPane().getComponent(2);
        tempBut.addActionListener(this);
        inputMethod.validate();
        inputMethod.pack();
        inputMethod.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        inputMethod.setVisible(true);
        gameOver = false;
        playerIco = new ImageIcon(getClass().getResource("sprites/Player.png"));
        blankIco = new ImageIcon(getClass().getResource("sprites/Blank.png"));
        wallIco = new ImageIcon(getClass().getResource("sprites/Wall.png"));
        switchIco = new ImageIcon(getClass().getResource("sprites/Switch.png"));
        doorIco = new ImageIcon(getClass().getResource("sprites/Door.png"));
        monsterIco = new ImageIcon(getClass().getResource("sprites/Monster.png"));
        switchCloseIco = new ImageIcon(getClass().getResource("sprites/SwitchClose.png"));
        fireIco = new ImageIcon(getClass().getResource("sprites/Fire.png"));
        this.game = game;
        gameFrame = new JFrame("Dragon Dungeon");
        gameFrame.setResizable(false);
        inputMethod.setResizable(false);
        gameFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    }

    /**
     * When an action is performed, update the display and game logic
     * If the game frame hasn't been created, create it using the approriate input method
     * If the game frame has been created, process the command then update the display
     * If the player has won or lost, inform them and ask if they want to play again
     * If the player is using a menu, process the menu command
     * @param e The ActionEvent generated by the action
     */
    @Override
    public void actionPerformed(ActionEvent e){
        if((e.getSource() instanceof GameButton)){
            GameButton temp = (GameButton) e.getSource();
            String action = temp.getActionName();
            if(action == "IN_MOUSE"){
                input = "MOUSE";
                inputMethod.setVisible(false);
                JOptionPane.showMessageDialog(new JFrame("Welcome"), "Welcome to Dragon Dungeon!\nYou've gotten stuck in a dungeon and need to escape.\nStep on all the switches to open the exit.\nUse your fire to shoot up to two blocks and kill monsters.\nDon't get caught!");
                Component[] tempCom;
                Container movementContainer = new Container();
                movementContainer.setLayout(new BorderLayout());
                movementContainer.add(new JLabel("Movement"), BorderLayout.CENTER);
                movementContainer.add(new GameButton("Up", "MU"), BorderLayout.NORTH);
                movementContainer.add(new GameButton("Down", "MD"), BorderLayout.SOUTH);
                movementContainer.add(new GameButton("Left", "ML"), BorderLayout.WEST);
                movementContainer.add(new GameButton("Right", "MR"), BorderLayout.EAST);
                tempCom = movementContainer.getComponents();
                GameButton buttonTemp;
                for(int i = 0; i < tempCom.length; i++){
                    if(tempCom[i] instanceof GameButton){
                        buttonTemp = (GameButton)tempCom[i];
                        buttonTemp.addActionListener(this);
                    }
                }
                Container fireContainer = new Container();
                fireContainer.setLayout(new BorderLayout());
                fireContainer.add(new JLabel("Fire"), BorderLayout.CENTER);
                fireContainer.add(new GameButton("Up", "FU"), BorderLayout.NORTH);
                fireContainer.add(new GameButton("Down", "FD"), BorderLayout.SOUTH);
                fireContainer.add(new GameButton("Right", "FR"), BorderLayout.EAST);
                fireContainer.add(new GameButton("Left", "FL"), BorderLayout.WEST);
                tempCom = fireContainer.getComponents();
                for(int i = 0; i < tempCom.length; i++){
                    if(tempCom[i] instanceof GameButton){
                        buttonTemp = (GameButton)tempCom[i];
                        buttonTemp.addActionListener(this);
                    }
                }
                gameGrid = new Container();
                gameGrid.setLayout(new GridLayout(Maze.SIZE, Maze.SIZE));
                String[] tempGame = game.toString().split("\n");
                char valueAt;
                for(int y = 0; y < Maze.SIZE; y++){
                    for(int x = 0; x < Maze.SIZE; x++){
                        valueAt = tempGame[y].charAt(x);
                        if(valueAt == 'W'){
                            gameGrid.add(new JLabel(wallIco));
                            continue;
                        }
                        if(valueAt == '.'){
                            gameGrid.add(new JLabel(blankIco));
                            continue;
                        }
                        if(valueAt == 'D'){
                            gameGrid.add(new JLabel(playerIco));
                            continue;
                        }
                        if(valueAt == 'S'){
                            gameGrid.add(new JLabel(switchIco));
                            continue;
                        }
                        if(valueAt == 'X'){
                            gameGrid.add(new JLabel(doorIco));
                            continue;
                        }
                        if(valueAt == 'M'){
                            gameGrid.add(new JLabel(monsterIco));
                        }
                    }
                }
                gameFrame.setLayout(new BorderLayout());
                gameFrame.setJMenuBar(new JMenuBar());
                JMenu tempMenu;
                tempMenu = new JMenu("Game");
                tempMenu.add(new GameButton("Restart", "REPLAY"));
                tempMenu.add(new GameButton("Exit", "EXIT"));
                tempCom = tempMenu.getMenuComponents();
                for(int i = 0; i < tempCom.length; i++){
                    if(tempCom[i] instanceof GameButton){
                        buttonTemp = (GameButton)tempCom[i];
                        buttonTemp.addActionListener(this);
                    }
                }
                gameFrame.getJMenuBar().add(tempMenu);
                tempMenu = new JMenu("Difficulty", false);
                tempMenu.add(new GameButton("Easy", "DIFF_EASY"));
                tempMenu.add(new GameButton("Medium", "DIFF_MED"));
                tempMenu.add(new GameButton("Hard", "DIFF_HARD"));
                tempCom = tempMenu.getMenuComponents();
                for(int i = 0; i < tempCom.length; i++){
                    if(tempCom[i] instanceof GameButton){
                        buttonTemp = (GameButton)tempCom[i];
                        buttonTemp.addActionListener(this);
                    }
                }
                gameFrame.getJMenuBar().add(tempMenu);
                tempMenu = new JMenu("Controls", false);
                tempMenu.add(new GameButton("Keyboard", "CON_KEY"));
                tempMenu.add(new GameButton("Mouse", "CON_MOUSE"));
                tempCom = tempMenu.getMenuComponents();
                for(int i = 0; i < tempCom.length; i++){
                    if(tempCom[i] instanceof GameButton){
                        buttonTemp = (GameButton)tempCom[i];
                        buttonTemp.addActionListener(this);
                    }
                }
                gameFrame.getJMenuBar().add(tempMenu);
                gameFrame.getJMenuBar().validate();
                gameFrame.getContentPane().add(movementContainer, BorderLayout.WEST);
                gameFrame.getContentPane().add(fireContainer, BorderLayout.EAST);
                gameFrame.getContentPane().add(gameGrid, BorderLayout.CENTER);
                gameFrame.getContentPane().add(status, BorderLayout.SOUTH);
                gameFrame.pack();
                gameFrame.setVisible(true);
            }
            
            if(action == "IN_KEY"){
                input = "KEY";
                inputMethod.setVisible(false);
                JOptionPane.showMessageDialog(new JFrame("Welcome"), "Welcome to Dragon Dungeon!\nYou've gotten stuck in a dungeon and need to escape.\nStep on all the switches to open the exit.\nUse your fire to shoot up to two blocks and kill monsters.\nDon't get caught!\nUse WASD or the arrow keys to move.\nUse IJKL to shoot fire.");
                gameFrame.addKeyListener(new DragonDungeonKeyListener(this));
                gameGrid = new Container();
                gameGrid.setLayout(new GridLayout(Maze.SIZE, Maze.SIZE));
                String[] tempGame = game.toString().split("\n");
                char valueAt;
                for(int y = 0; y < Maze.SIZE; y++){
                    for(int x = 0; x < Maze.SIZE; x++){
                        valueAt = tempGame[y].charAt(x);
                        if(valueAt == 'W'){
                            gameGrid.add(new JLabel(wallIco));
                            continue;
                        }
                        if(valueAt == '.'){
                            gameGrid.add(new JLabel(blankIco));
                            continue;
                        }
                        if(valueAt == 'D'){
                            gameGrid.add(new JLabel(playerIco));
                            continue;
                        }
                        if(valueAt == 'S'){
                            gameGrid.add(new JLabel(switchIco));
                            continue;
                        }
                        if(valueAt == 'X'){
                            gameGrid.add(new JLabel(doorIco));
                            continue;
                        }
                        if(valueAt == 'M'){
                            gameGrid.add(new JLabel(monsterIco));
                        }
                    }
                }
                gameGrid.validate();
                gameFrame.setJMenuBar(new JMenuBar());
                JMenu tempMenu;
                tempMenu = new JMenu("Game");
                tempMenu.add(new GameButton("Restart", "REPLAY"));
                tempMenu.add(new GameButton("Exit", "EXIT"));
                Component tempCom[] = tempMenu.getMenuComponents();
                GameButton buttonTemp;
                for(int i = 0; i < tempCom.length; i++){
                    if(tempCom[i] instanceof GameButton){
                        buttonTemp = (GameButton)tempCom[i];
                        buttonTemp.addActionListener(this);
                    }
                }
                gameFrame.getJMenuBar().add(tempMenu);
                tempMenu = new JMenu("Difficulty", false);
                tempMenu.add(new GameButton("Easy", "DIFF_EASY"));
                tempMenu.add(new GameButton("Medium", "DIFF_MED"));
                tempMenu.add(new GameButton("Hard", "DIFF_HARD"));
                tempCom = tempMenu.getMenuComponents();
                for(int i = 0; i < tempCom.length; i++){
                    if(tempCom[i] instanceof GameButton){
                        buttonTemp = (GameButton)tempCom[i];
                        buttonTemp.addActionListener(this);
                    }
                }
                gameFrame.getJMenuBar().add(tempMenu);
                tempMenu = new JMenu("Controls", false);
                tempMenu.add(new GameButton("Keyboard", "CON_KEY"));
                tempMenu.add(new GameButton("Mouse", "CON_MOUSE"));
                tempCom = tempMenu.getMenuComponents();
                for(int i = 0; i < tempCom.length; i++){
                    if(tempCom[i] instanceof GameButton){
                        buttonTemp = (GameButton)tempCom[i];
                        buttonTemp.addActionListener(this);
                    }
                }
                gameFrame.getJMenuBar().add(tempMenu);
                gameFrame.getJMenuBar().validate();
                gameFrame.setLayout(new BorderLayout());
                gameFrame.getContentPane().add(gameGrid, BorderLayout.CENTER);
                gameFrame.getContentPane().add(status, BorderLayout.SOUTH);
                gameFrame.validate();
                gameFrame.pack();
                gameFrame.setVisible(true);
            }
            
            if((action == "FU") && (!gameOver)){
                game.getPlayer().processCommand('I');
                repaint();
                gameFrame.update(gameFrame.getGraphics());
                try{
                    java.lang.Thread.sleep(200);
                }
                catch(Exception a){
                }
            }
            if((action == "FD") && (!gameOver)){
                game.getPlayer().processCommand('K');
                repaint();
                gameFrame.update(gameFrame.getGraphics());
                try{
                    java.lang.Thread.sleep(200);
                }
                catch(Exception a){
                }
            }
            if((action == "FL") && (!gameOver)){
                game.getPlayer().processCommand('J');
                repaint();
                gameFrame.update(gameFrame.getGraphics());
                try{
                    java.lang.Thread.sleep(200);
                }
                catch(Exception a){
                }
            }
            if((action == "FR") && (!gameOver)){
                game.getPlayer().processCommand('L');
                repaint();
                gameFrame.update(gameFrame.getGraphics());
                try{
                    java.lang.Thread.sleep(200);
                }
                catch(Exception a){
                }
            }
            if((action == "MU") && (!gameOver)){
                game.getPlayer().processCommand('W');
            }
            if((action == "MD") && (!gameOver)){
                game.getPlayer().processCommand('S');
            }
            if((action == "ML") && (!gameOver)){
                game.getPlayer().processCommand('A');
            }
            if((action == "MR") && (!gameOver)){
                game.getPlayer().processCommand('D');
            }
            if(action == "REPLAY"){
                Object[] options = {"Yes", "No"};
                int replay = JOptionPane.showOptionDialog(new JFrame(), "Do you wish to start a new game?", "Restart", JOptionPane.YES_NO_OPTION, JOptionPane.PLAIN_MESSAGE, null, options, options[0]);
                if(replay == 0){
                    gameGrid = null;
                    gameFrame.dispose();
                    gameFrame = new JFrame("Dragon Dungeon");
                    gameFrame.setResizable(false);
                    inputMethod.setResizable(false);
                    gameFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
                    gameOver = false;
                    game = new DragonDungeon(Difficulty);
                    if(input == "KEY"){
                        actionPerformed(new ActionEvent(new GameButton("A", "IN_KEY"), 10, ""));
                        return;
                    }
                    else{
                        actionPerformed(new ActionEvent(new GameButton("A", "IN_MOUSE"), 10, ""));
                        return;
                    }
                }
                return;
            }
            if(action == "EXIT"){
                Object[] options = {"Yes", "No"};
                int replay = JOptionPane.showOptionDialog(new JFrame(), "Do you really want to quit?", "Quit", JOptionPane.YES_NO_OPTION, JOptionPane.PLAIN_MESSAGE, null, options, options[0]);
                if(replay == 0){
                    System.exit(0);
                }
            }
            if(action == "DIFF_EASY"){
                JOptionPane.showMessageDialog(new JFrame("Change Difficulty"), "You have set the difficulty to easy.\nYou must start a new game for this change to work.");
                Difficulty = 1;
                actionPerformed(new ActionEvent(new GameButton("A", "REPLAY"), 10, ""));
                return;
            }
            if(action == "DIFF_MED"){
                JOptionPane.showMessageDialog(new JFrame("Change Difficulty"), "You have set the difficulty to medium.\nYou must start a new game for this change to work.");
                Difficulty = 2;
                actionPerformed(new ActionEvent(new GameButton("A", "REPLAY"), 10, ""));
                return;
            }
            if(action == "DIFF_HARD"){
                JOptionPane.showMessageDialog(new JFrame("Change Difficulty"), "You have set the difficulty to hard.\nYou must start a new game for this change to work.");
                Difficulty = 3;
                actionPerformed(new ActionEvent(new GameButton("A", "REPLAY"), 10, ""));
                return;
            }
            if(action == "CON_KEY"){
                input = "KEY";
                JOptionPane.showMessageDialog(new JFrame("Controls Changed"), "You have set the controls to keyboard.\nYou must start a new game for this change to work.");
                actionPerformed(new ActionEvent(new GameButton("A", "REPLAY"), 10, ""));
                return;
            }
            if(action == "CON_MOUSE"){
                input = "MOUSE";
                JOptionPane.showMessageDialog(new JFrame("Controls Changed"), "You have set the controls to mouse.\nYou must start a new game for this change to work.");
                actionPerformed(new ActionEvent(new GameButton("A", "REPLAY"), 10, ""));
                return;
            }
            if(!gameOver){
                game.clearFire();
                game.resolve();
                repaint();
                Dragon player = (Dragon)game.getPlayer();
                status.setText("Ammo: " + player.getAmmo());
                if(game.hasWon()){
                    status.setText("YOU WIN!");
                    gameOver = true;
                    JOptionPane.showMessageDialog(new JFrame("You win"), "You've escaped the dungeon!");
                    actionPerformed(new ActionEvent(new GameButton("A", "REPLAY"), 10, ""));
                    return;
                }
                if(game.hasLost()){
                    status.setText("YOU LOSE!");
                    gameOver = true;
                    JOptionPane.showMessageDialog(new JFrame("You Lose"), "You've been defeated by a monster!");
                    actionPerformed(new ActionEvent(new GameButton("A", "REPLAY"), 10, ""));
                    return;
                }
            }
        }
        return;
    }
    
    /**
     * Redraw the display according to the current game state
     */
    public void repaint(){
        String[] tempGame = game.toString().split("\n");
        char valueAt;
        for(int y = 0; y < Maze.SIZE; y++){
            for(int x = 0; x < Maze.SIZE; x++){
                if(gameGrid.getComponentAt((x * 32) + 16, (y * 32) + 16) instanceof JLabel){
                    JLabel tempLabel = (JLabel)gameGrid.getComponentAt((x * 32) + 16, (y * 32) + 16);
                    valueAt = tempGame[y].charAt(x);
                    if(valueAt == 'W'){
                        tempLabel.setIcon(wallIco);
                        continue;
                    }
                    if(valueAt == 'F'){
                        tempLabel.setIcon(fireIco);
                        continue;
                    }
                    if(valueAt == '.'){
                        tempLabel.setIcon(blankIco);
                        continue;
                    }
                    if(valueAt == 'D'){
                        tempLabel.setIcon(playerIco);
                        continue;
                    }
                    if(valueAt == 'S'){
                        if(game.switchActive(x, y)){
                            tempLabel.setIcon(switchCloseIco);
                        }
                        else{
                            tempLabel.setIcon(switchIco);
                        }
                        continue;
                    }
                    if(valueAt == 'X'){
                        tempLabel.setIcon(doorIco);
                        continue;
                    }
                    if(valueAt == 'M'){
                        tempLabel.setIcon(monsterIco);
                    }
                }
            }
        }
        gameGrid.validate();
        return;
    }
}
